<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.grayraccoon.samples</groupId>
	<artifactId>dummy-webapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Simple Elastic Beanstalk Application Template</name>
	<description>Sample Configuration project for small Spring Boot web applications that can be deployed into a single EC2 in an Elastic Beanstalk Multicontainer Docker Environment, using two or more app instances and an nginx service configured to generate ssl certificates and perform load balancing among app instances.</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<spring-cloud.version>Hoxton.M3</spring-cloud.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.retry</groupId>
			<artifactId>spring-retry</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<finalName>${project.artifactId}</finalName>

		<plugins>
			<!-- Spring Boot Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<classifier>exec</classifier>
				</configuration>
				<executions>
					<execution>
						<id>build-info</id>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- prepare aws deploy files. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>

					<execution>
						<id>prepare</id>
						<phase>package</phase>
						<configuration>
							<target>

								<!-- release HTTP -->
								<copy todir="${project.build.directory}" overwrite="true">
									<fileset dir="./" includes="release-http/**" />
								</copy>
								<fixcrlf srcdir="${project.build.directory}/release-http" eol="unix" includes="**/*.sh" />
								<copy todir="${project.build.directory}/release-http/java-app" overwrite="true">
									<fileset dir="${project.build.directory}/"
											 includes="${project.build.finalName}-exec.jar" />
								</copy>
								<zip compress="false"
									 destfile="${project.build.directory}/release-http.zip"
									 basedir="${project.build.directory}/release-http" />

								<!-- release HTTPS -->
								<copy todir="${project.build.directory}" overwrite="true">
									<fileset dir="./" includes="release-https/**" />
								</copy>
								<fixcrlf srcdir="${project.build.directory}/release-https" eol="unix" includes="**/*.sh" />
								<copy todir="${project.build.directory}/release-https/java-app" overwrite="true">
									<fileset dir="${project.build.directory}/"
											 includes="${project.build.finalName}-exec.jar" />
								</copy>
								<zip compress="false"
									 destfile="${project.build.directory}/release-https.zip"
									 basedir="${project.build.directory}/release-https" />

							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>

			</plugin>


		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>

		<repository>
			<id>jitpack.io</id>
			<name>JitPack</name>
			<url>https://jitpack.io</url>
		</repository>
	</repositories>

</project>
